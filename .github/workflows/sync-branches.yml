name: Sync Remote Branches

on:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时同步一次
  workflow_dispatch:        # 支持手动触发
  repository_dispatch:      # 支持API触发
    types: [sync-requested]

jobs:
  sync-remote:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branches: ['main']  # 需要同步的分支列表
    permissions:
      contents: write  # 需要写权限推送分支
      
    steps:
      - name: 检出当前仓库
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branches }}
          fetch-depth: 0

      - name: 添加上游仓库
        run: |
          git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git
          git fetch upstream --prune
        env:
          UPSTREAM_REPO: ymyuuu/IPDB  # 替换为真实上游仓库

      - name: 尝试同步分支
        id: sync
        run: |
          # 尝试合并上游分支
          git checkout ${{ matrix.branches }}
          if git merge --no-commit --no-ff upstream/${{ matrix.branches }}; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            # 处理冲突
            git merge --abort
            echo "status=conflict" >> $GITHUB_OUTPUT
            echo "conflict_files=$(git diff --name-only --diff-filter=U | tr '\n' ',')" >> $GITHUB_OUTPUT
          fi

      - name: 推送更新
        if: steps.sync.outputs.status == 'success'
        run: |
          git config user.name "GitHub Sync Bot"
          git config user.email "actions@github.com"
          git commit -m "🔁 自动同步上游分支: ${{ matrix.branches }} [skip ci]"
          git push origin ${{ matrix.branches }}

      - name: 冲突处理
        if: steps.sync.outputs.status == 'conflict'
        uses: actions/github-script@v7
        with:
          script: |
            const branch = '${{ matrix.branches }}';
            const conflictFiles = '${{ steps.sync.outputs.conflict_files }}'.split(',');
            
            // 创建冲突报告issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `分支同步冲突: ${branch}`,
              body: `⚠️ 无法自动同步分支 ${branch}\n\n` +
                     `**冲突文件**:\n${conflictFiles.map(f => `- ${f}`).join('\n')}\n\n` +
                     `[点击解决冲突](${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/compare/${branch}...upstream/${branch})`,
              labels: ['sync-conflict']
            });
            
            // 添加分支保护注释
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `分支同步失败！存在冲突需要手动解决。`
            });

      - name: 发送通知
        if: always()
        uses: actions-slack@v3
        with:
          status: ${{ steps.sync.outputs.status }}
          fields: repo,branch,status
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
